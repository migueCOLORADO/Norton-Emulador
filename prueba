#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <chrono>
#include <ctime>
#include <thread>
using namespace std;

struct Amenaza {
    string id;
    string descripcion;
    string clasificacion; // "Alto", "Bajo", "Falsa amenaza"
    string horaRecepcion;
    chrono::time_point<chrono::system_clock> tiempoRecepcion;
};

string obtenerHora() {
    auto ahora = chrono::system_clock::now();
    time_t tiempoActual = chrono::system_clock::to_time_t(ahora);
    string hora = ctime(&tiempoActual);
    hora.pop_back(); // quitar salto de línea
    return hora;
}

queue<Amenaza> colaAlto;
queue<Amenaza> colaBajo;
vector<Amenaza> historial;

void ingresarAmenaza() {
    Amenaza a;
    cout << "\nIngrese el ID de la misión (ej: M101): ";
    cin >> a.id;
    cin.ignore();
    cout << "Descripción de la amenaza: ";
    getline(cin, a.descripcion);
    cout << "Clasificación de riesgo (Alto / Bajo / Falsa): ";
    getline(cin, a.clasificacion);

    a.horaRecepcion = obtenerHora();
    a.tiempoRecepcion = chrono::system_clock::now();

    if (a.clasificacion == "Alto" || a.clasificacion == "alto") {
        colaAlto.push(a);
        cout << "\n Amenaza de ALTO riesgo asignada a escuadrones élite.\n";
    } else if (a.clasificacion == "Bajo" || a.clasificacion == "bajo") {
        colaBajo.push(a);
        cout << "\n Amenaza de BAJO riesgo asignada a misiones de reconocimiento.\n";
    } else {
        historial.push_back(a);
        cout << "\n Amenaza FALSA archivada directamente en historial.\n";
    }
}

void actualizarColas() {
    auto ahora = chrono::system_clock::now();

    // Revisar amenazas altas (1 minuto)
    while (!colaAlto.empty()) {
        auto a = colaAlto.front();
        auto tiempoTrans = chrono::duration_cast<chrono::seconds>(ahora - a.tiempoRecepcion).count();
        if (tiempoTrans >= 60) { // 1 minuto
            historial.push_back(a);
            colaAlto.pop();
        } else break;
    }

    // Revisar amenazas bajas (3 minutos)
    while (!colaBajo.empty()) {
        auto a = colaBajo.front();
        auto tiempoTrans = chrono::duration_cast<chrono::seconds>(ahora - a.tiempoRecepcion).count();
        if (tiempoTrans >= 180) { // 3 minutos
            historial.push_back(a);
            colaBajo.pop();
        } else break;
    }
}


void informe() {
    actualizarColas();

    cout << "\n========= INFORME DE AMENAZAS =========\n";

    // Amenazas Altas
    cout << "\nLista de Amenazas Altas:\n";
    if (colaAlto.empty()) cout << " - No hay amenazas altas pendientes.\n";
    else {
        queue<Amenaza> temp = colaAlto;
        while (!temp.empty()) {
            Amenaza a = temp.front();
            cout << " " << a.id << " | " << a.horaRecepcion << "\n";
            temp.pop();
        }
    }

    // Amenazas Bajas
    cout << "\nLista de Amenazas Bajas:\n";
    if (colaBajo.empty()) cout << " - No hay amenazas bajas pendientes.\n";
    else {
        queue<Amenaza> temp = colaBajo;
        while (!temp.empty()) {
            Amenaza a = temp.front();
            cout << " " << a.id << " | " << a.horaRecepcion << "\n";
            temp.pop();
        }
    }

    // Historial
    cout << "\nHistorial de amenazas:\n";
    if (historial.empty()) cout << " - No hay historial registrado.\n";
    else {
        for (auto &a : historial) {
            cout << " " << a.id << " (" << a.clasificacion << ") | " << a.horaRecepcion << "\n";
        }
    }

    cout << "=============================================\n";
}

// -------------------- Función principal --------------------
int main() {
    int opcion;
    cout << "  Bienvenido al Sistema de Análisis de Amenazas \n";
    cout << "     Agencia de Seguridad Global (ASG)\n";
    cout << "=============================================\n";

    do {
        cout << "\nMenú Principal:\n";
        cout << "1. Ingresar amenaza\n";
        cout << "2. Mostrar informe\n";
        cout << "3. Salir\n";
        cout << "Seleccione una opción: ";
        cin >> opcion;
        cin.ignore();

        switch (opcion) {
            case 1: ingresarAmenaza(); break;
            case 2: informe(); break;
            case 3: cout << "\n Cerrando el sistema... Gracias.\n"; break;
            default: cout << "\n Opción inválida.\n"; break;
        }
    } while (opcion != 3);

    return 0;
}
